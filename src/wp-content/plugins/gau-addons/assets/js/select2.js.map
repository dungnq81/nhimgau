{"version":3,"file":"select2.js","sources":["../../resources/js/select2.js"],"sourcesContent":["jQuery(function ($) {\n    // select2 multiple\n    const select2_multiple = $('.select2-multiple');\n    $.each(select2_multiple, function (i, el) {\n        $(el).select2({\n            multiple: true,\n            allowClear: true,\n            width: 'resolve',\n            dropdownAutoWidth: true,\n            placeholder: $(el).attr('placeholder'),\n        });\n    });\n\n    // select2 tags\n    const select2_tags = $('.select2-tags');\n    $.each(select2_tags, function (i, el) {\n        $(el).select2({\n            multiple: true,\n            tags: true,\n            allowClear: true,\n            width: 'resolve',\n            dropdownAutoWidth: true,\n            placeholder: $(el).attr('placeholder'),\n        });\n    });\n\n    // select2 IPs\n    const select2_ips = $('.select2-ips');\n    $.each(select2_ips, function (i, el) {\n        $(el).select2({\n            multiple: true,\n            tags: true,\n            allowClear: true,\n            width: 'resolve',\n            dropdownAutoWidth: true,\n            placeholder: $(el).attr('placeholder'),\n            createTag: function (params) {\n                let term = $.trim(params.term);\n\n                // Validate the term as an IP address or range\n                if (isValidIPRange(term)) {\n                    return {\n                        id: term,\n                        text: term,\n                    };\n                } else {\n                    return null;\n                }\n            },\n        });\n    });\n\n    // select2 emails\n    const select2_emails = $('.select2-emails');\n    $.each(select2_emails, function (i, el) {\n        $(el).select2({\n            multiple: true,\n            tags: true,\n            allowClear: true,\n            width: 'resolve',\n            dropdownAutoWidth: true,\n            placeholder: $(el).attr('placeholder'),\n            createTag: function (params) {\n                let term = $.trim(params.term);\n                if (isValidEmail(term)) {\n                    return {\n                        id: term,\n                        text: term,\n                    };\n                } else {\n                    return null;\n                }\n            },\n        });\n    });\n});\n\n/**\n * Validate email address\n *\n * @param {string} email\n * @returns {boolean}\n */\nfunction isValidEmail(email) {\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailPattern.test(email);\n}\n\n/**\n * validate IP range (IPv4)\n *\n * @param range\n * @returns {boolean}\n */\nfunction isValidIPRange(range) {\n    const ipPattern =\n        /^(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})$/;\n    const rangePattern =\n        /^(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})-(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/;\n    const cidrPattern =\n        /^(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\.(25[0-5]|2[0-4]\\d|1\\d{2}|\\d{1,2})\\/(\\d|[1-2]\\d|3[0-2])$/;\n\n    if (ipPattern.test(range)) {\n        return true;\n    }\n\n    if (rangePattern.test(range)) {\n        const [startIP, endRange] = range.split('-');\n        const endIP = startIP.split('.').slice(0, 3).join('.') + '.' + endRange;\n        return compareIPs(startIP, endIP) < 0;\n    }\n\n    return cidrPattern.test(range);\n}\n\n/**\n * compare two IP addresses\n *\n * @param ip1\n * @param ip2\n * @returns {number}\n */\nfunction compareIPs(ip1, ip2) {\n    const ip1Parts = ip1.split('.').map(Number);\n    const ip2Parts = ip2.split('.').map(Number);\n\n    for (let i = 0; i < 4; i++) {\n        if (ip1Parts[i] < ip2Parts[i]) return -1;\n        if (ip1Parts[i] > ip2Parts[i]) return 1;\n    }\n    return 0;\n}\n"],"names":[],"mappings":"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"}
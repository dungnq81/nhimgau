@use "sass:list";
@use "sass:math";
@use "sass:meta";

@use "../functions" as func;
@use "../variables" as vars;
@use "mixins" as mixin;

@mixin flex-self( $total: 1, $n: 1, $gap: false ) {
    @if meta.type-of($gap) == bool or $gap < 0 {
        $gap: 0;
    }
    @if func.is-int($total) and func.is-int($n) and $n > 0 {
        @if $total == $n {
            width: percentage(1);
        } @else if $total > $n {
            width: func.subtract(
                            percentage(func.divide($n, $total)),
                            func.fs(($total - $n) * func.divide($gap, $total))
            );
        }
    }
}

@mixin flex-basis( $n: 1, $gap: false ) {
    @include flex-self(vars.$grid-columns, $n, $gap);
}

@mixin media-flex-basis(
    $m: 1,
    $t: false,
    $d: false,
    $gap_m: false,
    $gap: false
) {
    flex: 0 0 auto;

    @if func.is-int($m) and $m > 0 {
        @include flex-basis($m, $gap_m);
    }
    @if func.is-int($t) and $t > 0 {
        @include mixin.mq-min(tablet) {
            @include flex-basis($t, $gap);
        }
    }
    @if func.is-int($d) and $d > 0 {
        @include mixin.mq-min(desktop) {
            @include flex-basis($d, $gap);
        }
    }
}

@mixin media-flex-self(
    $m: 1,
    $t: false,
    $d: false,
    $gap_m: false,
    $gap: false
) {
    @if func.is-int($m) and $m > 0 {
        @include flex-self($m, 1, $gap_m);
    }
    @if func.is-int($t) and $t > 0 {
        @include mixin.mq-min(tablet) {
            @include flex-self($t, 1, $gap);
        }
    }
    @if func.is-int($d) and $d > 0 {
        @include mixin.mq-min(desktop) {
            @include flex-self($d, 1, $gap);
        }
    }
}

@mixin flex-layout-auto(
    $gap_m: false,
    $gap: false,
    $min_width: 0,
    $max_width: 100%,
    $class_cell: '.cell'
) {
    @include flex-x(true);
    @include mixin.media-gap($gap_m, $gap, false);

    & > #{unquote($class_cell)} {
        min-width: $min_width;
        max-width: $max_width;
        @include flex-auto;
    }
}

@mixin flex-layout(
    $m: 1,
    $t: false,
    $d: false,
    $gap_m: false,
    $gap: false,
    $class_cell: '.cell'
) {
    @include flex-x(true);
    @include mixin.media-gap($gap_m, $gap, false);

    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell(false);
        }

        @include media-flex-self($m, $t, $d, $gap_m, $gap);
    }
}

@mixin flex-shrink {
    flex: 0 0 auto;
    max-width: 100%;
    min-height: 0;
    min-width: 0;
}

@mixin flex-auto {
    flex: 1 1 0;
    width: auto;
}

@mixin flex-stretch {
    flex: 0 0 auto;
    width: 100%;
}

@mixin cell( $w: false ) {
    flex: 0 0 auto;
    max-width: 100%;
    min-height: 0;
    min-width: 0;

    @if type-of($w) != bool {
        width: func.fs($w);
    }
}

@mixin flex-x($flex: true, $reverse: false) {
    @if true == $flex {
        & {
            display: flex;
        }
    }

    @if false == $reverse {
        & {
            flex-flow: row wrap;
        }
    } @else {
        & {
            flex-flow: row-reverse wrap;
        }
    }
}

@mixin flex-y($flex: true, $reverse: false) {
    @if true == $flex {
        display: flex;
    }

    @if false == $reverse {
        flex-flow: column nowrap;
    } @else {
        flex-flow: column-reverse nowrap;
    }
}

@mixin flex-padding-x(
    $padding_m: vars.$gutter-xs,
    $padding: vars.$gutter,
    $class_cell: '.cell'
) {
    @include mixin.mx-gutter($padding_m, $padding);

    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell();
        }

        @include mixin.px-gutter($padding_m, $padding);
    }
}

@mixin flex-padding-y(
    $padding_m: vars.$gutter-xs,
    $padding: vars.$gutter,
    $class_cell: '.cell'
) {
    @include mixin.my-gutter($padding_m, $padding);

    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell();
        }

        @include mixin.py-gutter($padding_m, $padding);
    }
}

@mixin flex-align-center( $direction_column: false ) {
    display: flex;
    align-items: center;

    @if true ==  $direction_column {
        flex-direction: $direction_column;
    }
}

@mixin flex-center() {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin inline-flex-center() {
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

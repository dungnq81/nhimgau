@use "sass:list";
@use "sass:math";

@use "../functions" as func;
@use "mixins" as mixin;

@mixin grid-x( $grid: true  ) {
    @if true == $grid {
        & {
            display: grid;
        }
    }

    & {
        grid-auto-flow: row;
    }
}

@mixin grid-y( $grid: true  ) {
    @if true == $grid {
        & {
            display: grid;
        }
    }

    & {
        grid-auto-flow: column;
    }
}

@mixin grid-layout( $m: 1, $t: false, $d: false, $gap_m: false, $gap: false, $columns: true ) {
    @include mixin.media-gap($gap_m, $gap, false);
    @include media-grid-template($m, $t, $d, $columns);
}

@mixin grid-self( $row-start: 1, $column-start: 1, $row-end: 2, $column-end: 2 ) {
    grid-area: list.slash($row-start, $column-start, $row-end, $column-end);
}

@mixin media-grid-template( $m: 1, $t: false, $d: false, $columns: true ) {
    @if math.is-unitless( $m ) and $m > 0 {
        @include grid-template($m, $columns);
    }

    @if math.is-unitless( $t ) and $t > 0 {
        @include mixin.mq-min(md) {
            @include grid-template($t, $columns);
        }
    }

    @if math.is-unitless( $d ) and $d > 0 {
        @include mixin.mq-min(lg) {
            @include grid-template($d, $columns);
        }
    }
}

@mixin grid-template( $n: 1, $columns: true ) {
    @if true == $columns {
        & {
            grid-template-columns: repeat( $n, 1fr );
        }
    } @else {
        & {
            grid-template-rows: repeat( $n, 1fr );
        }
    }
}

@mixin grid-center() {
    display: grid;
    align-items: center;
    justify-content: center;
}
